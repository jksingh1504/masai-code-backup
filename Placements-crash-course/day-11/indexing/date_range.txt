1. Aggregation pipeline for total revenue, total quantity sold, and average price per unit for each product, sorted by total revenue in descending order:

db.sales.aggregate([
  {
    $group: {
      _id: "$product",
      totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } },
      totalQuantity: { $sum: "$quantity" },
      totalPrice: { $sum: "$price" }
    }
  },
  {
    $addFields: {
      averagePricePerUnit: { $divide: ["$totalPrice", "$totalQuantity"] }
    }
  },
  { $sort: { totalRevenue: -1 } }
])


2. Aggregation pipeline for average age and gender distribution of a user's friends, sorted by the number of friends in descending order:

db.users.aggregate([
  { $unwind: "$friends" },
  {
    $lookup: {
      from: "users",
      localField: "friends",
      foreignField: "name",
      as: "friendDetails"
    }
  },
  {
    $group: {
      _id: "$_id",
      averageAge: { $avg: "$friendDetails.age" },
      genderDistribution: {
        $push: {
          gender: "$friendDetails.gender",
          count: { $size: "$friendDetails" }
        }
      }
    }
  },
  { $sort: { "genderDistribution.count": -1 } }
])


3. Aggregation pipeline for average rating for each genre, sorted by average rating in descending order:

db.movies.aggregate([
  { $unwind: "$ratings" },
  {
    $group: {
      _id: "$genre",
      averageRating: { $avg: "$ratings.score" }
    }
  },
  { $sort: { averageRating: -1 } }
])

4. Aggregation pipeline for total revenue and number of orders for each customer, sorted by total revenue in descending order:

db.orders.aggregate([
  {
    $group: {
      _id: "$customer_id",
      totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } },
      totalOrders: { $sum: 1 }
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "customer_id",
      as: "customerDetails"
    }
  },
  { $sort: { totalRevenue: -1 } }
])

5. Aggregation pipeline for total amount of orders placed by each customer for a given date range:

db.orders.aggregate([
  {
    $match: {
      order_date: {
        $gte: ISODate("start_date"),
        $lt: ISODate("end_date")
      }
    }
  },
  {
    $group: {
      _id: "$customer_id",
      totalAmount: { $sum: "$total_amount" }
    }
  }
])

6. Aggregation pipeline for the number of events of each type triggered by each user for a given date range:

db.events.aggregate([
  {
    $match: {
      event_date: {
        $gte: ISODate("start_date"),
        $lt: ISODate("end_date")
      }
    }
  },
  {
    $group: {
      _id: {
        user_id: "$user_id",
        event_type: "$event_type"
      },
      count: { $sum: 1 }
    }
  }
])

7. Aggregation pipeline for the total revenue generated by each product for a given date range:

db.sales.aggregate([
  {
    $match: {
      sale_date: {
        $gte: ISODate("start_date"),
        $lt: ISODate("end_date")
      }
    }
  },
  {
    $group: {
      _id: "$product_id",
      totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } }
    }
  }
])